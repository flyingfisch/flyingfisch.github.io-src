<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Expositus</title>
    <description>My personal blog where I post about programming as well as other topics.
</description>
    <link>http://flyingfisch.github.io/</link>
    <atom:link href="http://flyingfisch.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 14 Jun 2015 17:53:16 -0400</pubDate>
    <lastBuildDate>Sun, 14 Jun 2015 17:53:16 -0400</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Building a Modern Website: Part 1</title>
        <description>&lt;p&gt;This is the second of a 3-post series on building a modern website. The demo website is a fictional sailing club’s homepage. This post covers the navigation bar and body text. The last part will go over the footer and finishing touches. This is what the site looked like at the end of the last post:&lt;/p&gt;

&lt;p data-height=&quot;150&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;eNdaoe&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/eNdaoe/&quot;&gt;eNdaoe&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;navigation&quot;&gt;Navigation&lt;/h1&gt;

&lt;p&gt;The way we are going to do the navigation bar is putting the links in an unordered list, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;Join&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&quot;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;

  &lt;p&gt;At the time of writing I forgot, but the &lt;code&gt;ul&lt;/code&gt; element should be within a &lt;code&gt;nav&lt;/code&gt; to make it more semantic, like this:&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;nav&amp;gt;
    &amp;lt;ul&amp;gt;
         &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we have to style it. The first thing we’ll do is get rid of the bullets, margin and the padding.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    ul {
        list-style: none;
        margin: 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm, those list items look kind of weird. Let’s line them up horizontally.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    ul {
        display: inline-block;
        margin-left: 1em; // separate them a little
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, those links are lined up now, but they are hard to read on the blue, so let’s style them up a little.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    a {
        color: $light;
        font-family: $font-header;
        text-decoration: none;
        text-transform: uppercase;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then let’s get them to show up on the same line as the club name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    h1 {
        float: left;
    }

    ul {
        float: right;
        line-height: 80px; // centers the ul in the header. The trick is if you only need to center a single line of text you can do it by setting line-height to the height of the container
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;body-copy&quot;&gt;Body copy&lt;/h1&gt;

&lt;p&gt;Now let’s make some HTML for our page. We know we are going to have a header and some text, so let’s add that (&lt;a href=&quot;https://en.wikipedia.org/wiki/Greeking&quot;&gt;greeking&lt;/a&gt; was generated by &lt;a href=&quot;http://flyingfisch.github.io/announcement/2015/05/28/tolkien-ipsum.html&quot;&gt;Tolkien Ipsum&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;h1&amp;gt;The Men Escape to the Crack of Doom&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;The Man women and children hurried to The Crack of Doom for shelter. In the meantime, Aragorn insisted on attacking The mines of Moria, but the Orcs were waiting. Morgoth felt he did not have the strength to attack. The Hobbits were ravaging the countryside, leaving destruction in their wake. &amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Gandalf led the Ents to attack Weathertop, but the attack failed. Farmer Maggot felt he did not have the strength to build. 6 axe were smashed. Faramir insisted on attacking Hobbiton, but the Elves were waiting. &quot;Quick!&quot;, cried Grima Wormtongue, &quot;Dwarves!&quot; &amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;The Men were ravaging the countryside, leaving destruction in their wake. Eowyn attacked Weathertop, and slaughtered the Orcs in a surprise attack. Sam attacked The mines of Moria, and slaughtered the Hobbits in a surprise attack. The Elves ambushed Boromir at Bree. Meanwhile, The attack failed, forcing the Dwarves to retreat to Bree. &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time to style this stuff! The first thing I am going to do is make &lt;code&gt;h1&lt;/code&gt; and &lt;code&gt;h2&lt;/code&gt; small-caps.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1, h2 {
    font-varient: small-caps;
    font-weight: normal;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That looks nice, except the letters all touch the left hand side of the screen, making them hard to read. I’m going to add some padding to the article element to fix that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;article {
    padding: 1em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have noticed in the mockup that the first paragraph and header were set off from the rest of the text. We can do this by sticking that text inside a &lt;code&gt;section&lt;/code&gt; with class &lt;code&gt;feature&lt;/code&gt; and styling it up like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;article {
    .feature {
        font-size: 1.2em;
        margin-bottom: 2em;
        padding-left: 20%;
        padding-right: 20%;
        text-align: center;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Here is the website so far, with code and everything. Feel free to fork it on CodePen:&lt;/p&gt;

&lt;p data-height=&quot;424&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;GJEWMR&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/GJEWMR/&quot;&gt;GJEWMR&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That concludes this part of the series. In the next and final part I will build the footer, do some mobile optimizations, and put on the finishing touches. Stay tuned!&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/frontend/design/tutorial/modern-website-series/2015/06/10/building-a-modern-website-part-1.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/frontend/design/tutorial/modern-website-series/2015/06/10/building-a-modern-website-part-1.html</guid>
        
        
        <category>frontend</category>
        
        <category>design</category>
        
        <category>tutorial</category>
        
        <category>modern-website-series</category>
        
      </item>
    
      <item>
        <title>Announcing Tolkien Ipsum</title>
        <description>&lt;p&gt;I built a little website that generates Lord of the Rings themed Lorem Ipsum. You can &lt;a href=&quot;http://tolkienipsum.cloudapp.net/&quot;&gt;check it out live&lt;/a&gt; or view the source on &lt;a href=&quot;https://github.com/flyingfisch/tolkienIpsum&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;for-geeks&quot;&gt;For Geeks&lt;/h1&gt;

&lt;p&gt;I am hosting the site on a &lt;a href=&quot;http://azure.microsoft.com/&quot;&gt;Microsoft Azure&lt;/a&gt; Ubuntu 14.04 virtual machine. The setup process for serving Django was pretty straightforward, I just adapted the excellent &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04&quot;&gt;Digital Ocean tutorial&lt;/a&gt; to my needs. The project does use python3, so if you are planning on hosting it yourself you’ll want to keep that in mind.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 May 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/announcement/2015/05/28/tolkien-ipsum.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/announcement/2015/05/28/tolkien-ipsum.html</guid>
        
        
        <category>announcement</category>
        
      </item>
    
      <item>
        <title>Building a Modern Website: Part 0</title>
        <description>&lt;p&gt;This is the first of a 3-post series on building a modern website. The demo website is a fictional sailing club’s homepage. This post covers the mockup process and building the header. The next part will go into the navigation bar and body text.&lt;/p&gt;

&lt;h1 id=&quot;layout&quot;&gt;Layout&lt;/h1&gt;

&lt;p&gt;The first thing I do when building a website is come up with a layout. For this site I thought we would keep the layout fairly minimal. I don’t generally build wireframes, preferring building in the browser instead, but I whipped one up in this case to let you see what kind of layout I am envisioning.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/nautical-wireframe.svg&quot; alt=&quot;Wireframe for desktop layout&quot; /&gt;
&lt;figcaption&gt;Wireframe for desktop layout.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Since this is going to be responsive, we need to have a mobile layout as well.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/nautical-wireframe-mobile.svg&quot; alt=&quot;Wireframe for mobile layout&quot; /&gt;
&lt;figcaption&gt;Wireframe for mobile layout.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;colors&quot;&gt;Colors&lt;/h1&gt;

&lt;p&gt;The colors for this site are going to be blue and white. I got the exact shades straight from the &lt;a href=&quot;http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines#Color_Palette&quot;&gt;Tango project’s color palette&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/assets/nautical-palette.svg&quot; alt=&quot;Palette colors: #ffffff, #eeeeec, #3465a4, #204a87&quot; /&gt;
&lt;figcaption&gt;Colors: #ffffff, #eeeeec, #3465a4, #204a87&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;fonts&quot;&gt;Fonts&lt;/h1&gt;

&lt;p&gt;The first thing I like to do before actually designing the site is find a font to use. For this project I just ran over to &lt;a href=&quot;https://www.google.com/fonts/&quot;&gt;Google Fonts&lt;/a&gt; and chose Montserrat for the headers and Alegreya for the copy. As a rule of thumb it is usually good to choose a serif font for your body text if the headers are sans-serif, and vice versa.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code&gt;link&lt;/code&gt; tag for the fonts, we’re just going to add it into the header. Although there are other methods of using Google Fonts, the &lt;code&gt;link&lt;/code&gt; tag has the best browser support.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;link href=&quot;http://fonts.googleapis.com/css?family=Montserrat:400,700|Alegreya:400,400italic,700,700italic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will also be using &lt;a href=&quot;https://necolas.github.io/normalize.css/&quot;&gt;Normalize.css&lt;/a&gt; which basically gives you a starting point that looks the same across all browsers. Since we want to override it’s styles with ours we put it’s link tag first. Our &lt;code&gt;head&lt;/code&gt; tag should look something like this now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;R. S. Sailing Club&amp;lt;/title&amp;gt;

    &amp;lt;link href=&quot;http://fonts.googleapis.com/css?family=Montserrat:400,700|Alegreya:400,400italic,700,700italic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&amp;gt;
    &amp;lt;link href=&quot;/css/normalize.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&amp;gt;
    &amp;lt;link href=&quot;/css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re going to be using &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt; for the stylesheets, but don’t worry, I’ll explain any nuances we come across in the project. For now, just think of it as CSS with extra features. Here is our stylesheet so far:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html, body {
    width: 100%;
    height: 100%;
}

body * {
    box-sizing: border-box;
}

body {
    font-family: &#39;Alegreya&#39;, serif;
    font-size: 16px;
}

h1, h2, h3, h4, h5, h6 {
    font-family: &#39;Montserrat&#39;, sans-serif;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;designing-the-header&quot;&gt;Designing the header&lt;/h1&gt;

&lt;p&gt;Now that the fonts have been selected, we can start on the header. The markup for now is pretty simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;header&amp;gt;
    &amp;lt;h1&amp;gt;R. S. Sailing Club&amp;lt;/h1&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s get into the CSS. We want the background of the header to be dark blue, and the font should be white. Here is the site so far:&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;eNdaoe&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/eNdaoe/&quot;&gt;eNdaoe&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;sass-101&quot;&gt;SASS 101&lt;/h1&gt;

&lt;p&gt;This is probably a good time to go over a couple important SASS features: variables and nested selectors.&lt;/p&gt;

&lt;h2 id=&quot;variables&quot;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Variables names start with a &lt;code&gt;$&lt;/code&gt;, and can contain any information you can put in a property. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$my-border: 2px solid black;

div {
    border: $my-border;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That compiles to this CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;div {
    border: 2px solid black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;nested-selectors&quot;&gt;Nested Selectors&lt;/h1&gt;

&lt;p&gt;If you want to select an element inside another element, you can nest the selectors. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;header {
    h1 {
        color: #fff;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This compiles to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;header h1 {
    color: #fff;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the &lt;code&gt;&amp;amp;&lt;/code&gt; to select the parent element, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;a {
    color #000;
    text-decoration: none;

    &amp;amp;:hover {
        text-decoration: underline;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which compiles into this CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;a {
    color: #000;
    text-decoration: none;
}
a:hover {
    text-decoration: underline;
}
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Mon, 25 May 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/frontend/design/tutorial/modern-website-series/2015/05/25/building-a-modern-website-part-0.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/frontend/design/tutorial/modern-website-series/2015/05/25/building-a-modern-website-part-0.html</guid>
        
        
        <category>frontend</category>
        
        <category>design</category>
        
        <category>tutorial</category>
        
        <category>modern-website-series</category>
        
      </item>
    
      <item>
        <title>Using REST Inside Programs</title>
        <description>&lt;p&gt;Rich Hickey proposed an interesting idea in his &lt;a href=&quot;https://www.youtube.com/watch?v=rI8tNMsozo0&quot;&gt;keynote at RailsConf 2012&lt;/a&gt;.
The idea, if I understand correctly, is that if serialization is good between
servers as a way to separate concerns, then why don’t we do it between different
sections of code on the same server?&lt;/p&gt;

&lt;p&gt;Using REST between different code blocks seems like a good idea, but serialization seems a bit useless
in my humble opinion, since it only seems to add complexity to the program.&lt;/p&gt;

&lt;p&gt;I decided to write a little &lt;a href=&quot;https://github.com/flyingfisch/python-rest-poc/commits?author=flyingfisch&quot;&gt;proof-of-concept&lt;/a&gt; for this program in Python.
There is a module &lt;code&gt;rest.py&lt;/code&gt; which currently contains one class: &lt;code&gt;CRUD&lt;/code&gt;. &lt;code&gt;CRUD&lt;/code&gt;
has four built-in functions: &lt;code&gt;create()&lt;/code&gt;, &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;update()&lt;/code&gt;, and &lt;code&gt;delete()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the documentation for each of the built-in functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;create(object)
&quot;&quot;&quot;
Creates a new object.

Keyword arguments:
object -- Object or list of objects to create
&quot;&quot;&quot;

read()
&quot;&quot;&quot;Returns a list of created objects.&quot;&quot;&quot;

update(objectId, object)
&quot;&quot;&quot;
Updates object.

Keyword arguments:
objectId -- Key of object to update
object -- Object to update with
&quot;&quot;&quot;

delete(objectId)
&quot;&quot;&quot;
Deletes object from list.

Keyword arguments:
objectId -- Key of object to delete
&quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The built-in commands operate on an internal list &lt;code&gt;_objects&lt;/code&gt;, accessible through
&lt;code&gt;read()&lt;/code&gt;. Here is a simple example using the default methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from rest import CRUD

# A dictionary entry class
class DictEntry:
    Word = &quot;&quot;
    Definition = &quot;&quot;

    def __init__(self, word, definition):
        self.Word = word
        self.Definition = definition

    def __repr__(self):
        return &quot;(Word: {0}, Definition: {1})&quot;.format(self.Word, self.Definition)

# Make a CRUD instance
Dictionary = CRUD()

# Add a word to our dictionary
Dictionary.create(DictEntry(&quot;Programmer&quot;, &quot;A being that converts pizza and Coke into crde&quot;))

# Update the word
Dictionary.Update(0, DictEntry(&quot;Programmer&quot;, &quot;A being that converts pizza and Coke into code&quot;)

# Print the dictionary out to the terminal
print(Dictionary.read())

# Delete the word
Dictionary.Delete(0)

# Print the (empty) dictionary out to the terminal
print(Dictionary.read())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not sure how useful this is going to be, but it was fun to code up!&lt;/p&gt;

</description>
        <pubDate>Sun, 17 May 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/programming/web/2015/05/17/using-rest-internally.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/programming/web/2015/05/17/using-rest-internally.html</guid>
        
        
        <category>programming</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Pseudo-Element Kung-Fu</title>
        <description>&lt;p&gt;I recently found that the &lt;code&gt;content&lt;/code&gt; property can contain cooler stuff than just
strings. For instance, you can show the &lt;code&gt;href&lt;/code&gt; of a link in a cool popup with
absolutely no JS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;content: attr(href);
&lt;/code&gt;&lt;/pre&gt;

&lt;p data-height=&quot;378&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;YXypBV&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/YXypBV/&quot;&gt;Pure CSS link hover popup&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This allows us to show popups without JS as well, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;span class=&quot;popup&quot; data-popuptext=&quot;This is a CSS-only popup!&quot;&amp;gt;Hover!&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;span.popup:hover:after {
    content: attr(data-popuptext);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course a live demo with the full source:&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;6851&quot; data-slug-hash=&quot;oXbBXz&quot; data-default-tab=&quot;result&quot; data-user=&quot;flyingfisch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/flyingfisch/pen/oXbBXz/&quot;&gt;Pure CSS hover popup&lt;/a&gt; by flyingfisch (&lt;a href=&quot;http://codepen.io/flyingfisch&quot;&gt;@flyingfisch&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s all I’ve got, have fun messing around with &lt;code&gt;content&lt;/code&gt;!&lt;/p&gt;

</description>
        <pubDate>Fri, 08 May 2015 00:00:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/css/programming/web/2015/05/08/css-pseudo-elements-kung-fu.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/css/programming/web/2015/05/08/css-pseudo-elements-kung-fu.html</guid>
        
        
        <category>css</category>
        
        <category>programming</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Welcome</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/laptop.jpg&quot; alt=&quot;laptop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Welcome to my blog. I am a frontend .NET web developer (mainly ASP.net MVC with C#).
At home I use Linux exclusively and code in Python, Haskell, PHP (with the excellent
&lt;a href=&quot;http://laravel.org/&quot;&gt;Laravel&lt;/a&gt; framework), or any other language that fits the bill.&lt;/p&gt;

&lt;p&gt;I plan to post about programming mainly, but I may also post on other topics as well.
Stay tuned – or don’t (I won’t hate you).&lt;/p&gt;

&lt;h2 id=&quot;ps&quot;&gt;P.S.&lt;/h2&gt;

&lt;p&gt;“Expositus” is Latin for “open” and “accessible”.&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Apr 2015 14:44:00 -0400</pubDate>
        <link>http://flyingfisch.github.io/announcement/2015/04/25/welcome.html</link>
        <guid isPermaLink="true">http://flyingfisch.github.io/announcement/2015/04/25/welcome.html</guid>
        
        
        <category>announcement</category>
        
      </item>
    
  </channel>
</rss>
